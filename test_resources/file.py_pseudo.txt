from datetime IMPORT datetime, timedelta, timezone



DEFINE FUNCTION getConfusionMatrix(faults, predicted):

    IMPORT datetime

    

    SET truePositive TO []

    SET trueNegative TO []

    SET falsePositive TO []

    SET falseNegative TO []

    SET predicted TO predicted.assign(date_time TO lambda x: df['timestamp'])    

    

    FOR i, act IN faults.iterrows(): 

        SET minTime TO datetime.datetime.strptime(act.time_preliminary,'%Y-%m-%d %H:%M:%S+08:00')

        SET maxTime TO minTime + timedelta(minutes=5)



        truePositive.append(predicted.loc[(predicted.date_time  >= minTime) & (predicted.date_time <= maxTime) & (predicted.outliers EQUALS 1) & (predicted.target EQUALS act.ground_truth)])

        trueNegative.append(predicted.loc[predicted.outliers EQUALS 0])

        falsePositive.append(predicted.loc[(predicted.date_time < minTime) | (predicted.date_time > maxTime) & (predicted.outliers EQUALS 1)])

        falseNegative.append(predicted.loc[(predicted.date_time < minTime) | (predicted.date_time > maxTime) & (predicted.outliers EQUALS 0)])



        del maxTime, minTime

    

    ELSE: #remove all empty row

        SET truePositive TO list(filter(lambda dfTP: not dfTP.empty, truePositive))        

        SET trueNegative TO list(filter(lambda dfTN: not dfTN.empty, trueNegative))

        SET falsePositive TO list(filter(lambda dfFP: not dfFP.empty, falsePositive))

        SET falseNegative TO list(filter(lambda dfFN: not dfFN.empty, falseNegative))



    RETURN
